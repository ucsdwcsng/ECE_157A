id: wes_costas_cc
label: Costas Loop
category: '[wes]'
flags: [ python, cpp ]

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as \$keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
parameters:
- id: fn
  label: Natural Frequency
  dtype: real
- id: zeta
  label: Damping Parameter
  dtype: real
- id: loop_type
  label: Loop Type
  dtype: int

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
- domain: stream
  dtype: complex

outputs:
- domain: stream
  dtype: complex
- label: freq
  domain: stream
  dtype: complex

# templates to support callbacks n stuff
templates:
  imports: import wes
  make: wes.costas_cc(${fn}, ${zeta}, ${loop_type})
  callbacks:
  - set_natural_freq(${fn})
  - set_damping(${zeta})
  - set_loop_type(${loop_type})

cpp_templates:
    includes: ['#include <wes/costas_cc.h>']
    declarations: 'wes::costas_cc::sptr ${id};'
    make: 'this->${id} = wes::costas_cc::make(${fn}, ${zeta}, ${loop_type});'
    callbacks:
    - set_natural_freq(${fn})
    - set_damping(${zeta})
    - set_loop_type(${loop_type})

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
